{
  "api/Scream.UniMO.Collections.Container-2.html": {
    "href": "api/Scream.UniMO.Collections.Container-2.html",
    "title": "Class Container<T, U> | UniMO",
    "keywords": "Class Container<T, U> Use this scriptableobject to store all object you need. Inherit this class to fit your own object Inheritance System.Object Container<T, U> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO.Collections Assembly : cs.temp.dll.dll Syntax [Serializable] public class Container<T, U> where T : IConvertible Type Parameters Name Description T type of key U type of target object Fields Key Declaration public T Key Field Value Type Description T Value Declaration public U Value Field Value Type Description U Methods ContainsKey(T, IEnumerable<Container<T, U>>) Check if this collection contains specific key Declaration public static bool ContainsKey(T key, IEnumerable<Container<T, U>> collection) Parameters Type Name Description T key key to find System.Collections.Generic.IEnumerable < Container <T, U>> collection which collection to be found Returns Type Description System.Boolean return the result ContainsValue(U, IEnumerable<Container<T, U>>) Check if this collection contains specific value Declaration public static bool ContainsValue(U value, IEnumerable<Container<T, U>> collection) Parameters Type Name Description U value value to find System.Collections.Generic.IEnumerable < Container <T, U>> collection which collection to be found Returns Type Description System.Boolean return the result Keys(IEnumerable<Container<T, U>>) Get all the keys from a collection Declaration public static T[] Keys(IEnumerable<Container<T, U>> collection) Parameters Type Name Description System.Collections.Generic.IEnumerable < Container <T, U>> collection resource collection Returns Type Description T[] all the keys as array ToDictionary(IEnumerable<Container<T, U>>) Convert to dictionary Declaration public static Dictionary<T, U> ToDictionary(IEnumerable<Container<T, U>> collection) Parameters Type Name Description System.Collections.Generic.IEnumerable < Container <T, U>> collection which collection to be found Returns Type Description System.Collections.Generic.Dictionary <T, U> Convert Objects to dictionary ToList(IEnumerable<Container<T, U>>) Convert to list and ignore key Declaration public static List<U> ToList(IEnumerable<Container<T, U>> collection) Parameters Type Name Description System.Collections.Generic.IEnumerable < Container <T, U>> collection which collection to be found Returns Type Description System.Collections.Generic.List <U> convert the array of Objects to list Values(IEnumerable<Container<T, U>>) Get all the values from a collection Declaration public static U[] Values(IEnumerable<Container<T, U>> collection) Parameters Type Name Description System.Collections.Generic.IEnumerable < Container <T, U>> collection resource collection Returns Type Description U[] all the values as array"
  },
  "api/Scream.UniMO.Collections.ContainerExtension.html": {
    "href": "api/Scream.UniMO.Collections.ContainerExtension.html",
    "title": "Class ContainerExtension | UniMO",
    "keywords": "Class ContainerExtension ContainerExtension contains extension method for container class Inheritance System.Object ContainerExtension Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO.Collections Assembly : cs.temp.dll.dll Syntax public static class ContainerExtension Methods ContainsKey<T, U>(IEnumerable<Container<T, U>>, T) Check if this collection contains specific key Declaration public static bool ContainsKey<T, U>(this IEnumerable<Container<T, U>> collection, T key) where T : IConvertible Parameters Type Name Description System.Collections.Generic.IEnumerable < Container <T, U>> collection resource collection T key key to find Returns Type Description System.Boolean result Type Parameters Name Description T type of key U type of value ContainsValue<T, U>(IEnumerable<Container<T, U>>, U) Check if this collection contains specific value Declaration public static bool ContainsValue<T, U>(this IEnumerable<Container<T, U>> collection, U value) where T : IConvertible Parameters Type Name Description System.Collections.Generic.IEnumerable < Container <T, U>> collection resource collection U value value to find Returns Type Description System.Boolean result Type Parameters Name Description T type of key U type of value Keys<T, U>(IEnumerable<Container<T, U>>) Get all the keys from a collection Declaration public static T[] Keys<T, U>(this IEnumerable<Container<T, U>> collection) where T : IConvertible Parameters Type Name Description System.Collections.Generic.IEnumerable < Container <T, U>> collection resource collection Returns Type Description T[] all the keys as array Type Parameters Name Description T type of key U type of value ToDictionary<T, U>(IEnumerable<Container<T, U>>) Convert to dictionary ,ignore value key pair if key already exists Declaration public static Dictionary<T, U> ToDictionary<T, U>(this IEnumerable<Container<T, U>> collection) where T : IConvertible Parameters Type Name Description System.Collections.Generic.IEnumerable < Container <T, U>> collection resource collection Returns Type Description System.Collections.Generic.Dictionary <T, U> all object to dictionary Type Parameters Name Description T type of key U type of value ToList<T, U>(IEnumerable<Container<T, U>>) Convert to list and ignore key Declaration public static List<U> ToList<T, U>(this IEnumerable<Container<T, U>> collection) where T : IConvertible Parameters Type Name Description System.Collections.Generic.IEnumerable < Container <T, U>> collection resource collection Returns Type Description System.Collections.Generic.List <U> all object to list Type Parameters Name Description T type of key U type of value Values<T, U>(IEnumerable<Container<T, U>>) Get all the values from a collection Declaration public static U[] Values<T, U>(this IEnumerable<Container<T, U>> collection) where T : IConvertible Parameters Type Name Description System.Collections.Generic.IEnumerable < Container <T, U>> collection resource collection Returns Type Description U[] all the values as array Type Parameters Name Description T type of key U type of value"
  },
  "api/Scream.UniMO.Collections.html": {
    "href": "api/Scream.UniMO.Collections.html",
    "title": "Namespace Scream.UniMO.Collections | UniMO",
    "keywords": "Namespace Scream.UniMO.Collections Classes Container<T, U> Use this scriptableobject to store all object you need. Inherit this class to fit your own object ContainerExtension ContainerExtension contains extension method for container class ObjectPool ObjectPool is the class to handle object recycle and spawn PrefabContainer Use this scriptableobject to store all prefab you need. Interfaces IObjectPoolAble Inherit this interface make objects can be managed by class ObjectPool"
  },
  "api/Scream.UniMO.Collections.IObjectPoolAble.html": {
    "href": "api/Scream.UniMO.Collections.IObjectPoolAble.html",
    "title": "Interface IObjectPoolAble | UniMO",
    "keywords": "Interface IObjectPoolAble Inherit this interface make objects can be managed by class ObjectPool Namespace : Scream.UniMO.Collections Assembly : cs.temp.dll.dll Syntax public interface IObjectPoolAble Properties GameObject The gameobject of pool object Declaration GameObject GameObject { get; set; } Property Value Type Description GameObject Pool which pool is object belongs to Declaration ObjectPool Pool { get; set; } Property Value Type Description ObjectPool Methods Init<T>(T) Call this method to init data of object Declaration void Init<T>(T data) Parameters Type Name Description T data data Type Parameters Name Description T type of data Recycle() Call this method to recycle object back to pool Declaration void Recycle()"
  },
  "api/Scream.UniMO.Collections.ObjectPool.html": {
    "href": "api/Scream.UniMO.Collections.ObjectPool.html",
    "title": "Class ObjectPool | UniMO",
    "keywords": "Class ObjectPool ObjectPool is the class to handle object recycle and spawn Inheritance System.Object ObjectPool Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO.Collections Assembly : cs.temp.dll.dll Syntax [Serializable] public class ObjectPool Constructors ObjectPool(GameObject, Transform, Int32, Boolean) use this to set NECESSARY data via script You can also set data through inspector but should call init by self Declaration public ObjectPool(GameObject pooledObject, Transform poolParent, int pooledAmount = 1, bool isGrow = true) Parameters Type Name Description GameObject pooledObject object to spawn Transform poolParent parent for poolobjct System.Int32 pooledAmount how many object can pool hold System.Boolean isGrow can pool spawn new object when pool is empty Fields IsGrow define if pool will spawn new object when pool is empty Declaration public bool IsGrow Field Value Type Description System.Boolean PooledAmount How many item can pool hold Declaration public int PooledAmount Field Value Type Description System.Int32 PooledObject Object to spawn Declaration public GameObject PooledObject Field Value Type Description GameObject PoolParent Parent for all pool objects can be null Declaration public Transform PoolParent Field Value Type Description Transform Properties IsAvailable Call this property to check pool holds anything now Declaration public bool IsAvailable { get; } Property Value Type Description System.Boolean Methods GetPooledObject<T>(T) Return pool object from pool Declaration public IObjectPoolAble GetPooledObject<T>(T data) Parameters Type Name Description T data data for init pool object Returns Type Description IObjectPoolAble the pool object it will be null when pool is empty Type Parameters Name Description T init data type Init() Spawn all objects according to pooledAmount MUST CALL this method if you set data with inspector not constructor Declaration public void Init() RecycleObject(IObjectPoolAble) Recycle Object to Pooling again Declaration public void RecycleObject(IObjectPoolAble item) Parameters Type Name Description IObjectPoolAble item which item will be Recycle to ObjectPooling"
  },
  "api/Scream.UniMO.Collections.PrefabContainer.html": {
    "href": "api/Scream.UniMO.Collections.PrefabContainer.html",
    "title": "Class PrefabContainer | UniMO",
    "keywords": "Class PrefabContainer Use this scriptableobject to store all prefab you need. Inheritance System.Object PrefabContainer Namespace : Scream.UniMO.Collections Assembly : cs.temp.dll.dll Syntax public class PrefabContainer : ScriptableObject Fields PrefabDictionary Declaration public Container<string, object>[] PrefabDictionary Field Value Type Description Container < System.String , System.Object >[]"
  },
  "api/Scream.UniMO.Common.AsyncHelper.html": {
    "href": "api/Scream.UniMO.Common.AsyncHelper.html",
    "title": "Class AsyncHelper | UniMO",
    "keywords": "Class AsyncHelper Listen for event and wait until the event callback invoke as IEnumerator or Async method Inheritance System.Object AsyncHelper Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO.Common Assembly : cs.temp.dll.dll Syntax public class AsyncHelper : IWaitable Constructors AsyncHelper(Action) Declaration public AsyncHelper(Action request) Parameters Type Name Description System.Action request Properties IsReady Return if this action already finish Declaration public bool IsReady { get; } Property Value Type Description System.Boolean Methods Callback() Use this method to register the event you want to wait Declaration public void Callback() Request() Raise a request Declaration public void Request() Wait() Call this to wait as async method Declaration public Task Wait() Returns Type Description Task Wait(Action) Call this to wait in coroutine Declaration public IEnumerator Wait(Action onFinish = null) Parameters Type Name Description System.Action onFinish when callback is invoke you can use this method to catch the result Returns Type Description System.Collections.Generic.IEnumerator"
  },
  "api/Scream.UniMO.Common.AsyncHelper-1.html": {
    "href": "api/Scream.UniMO.Common.AsyncHelper-1.html",
    "title": "Class AsyncHelper<Result> | UniMO",
    "keywords": "Class AsyncHelper<Result> Listen for event and wait until the event callback invoke as IEnumerator or Async method Inheritance System.Object AsyncHelper<Result> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO.Common Assembly : cs.temp.dll.dll Syntax public class AsyncHelper<Result> : IWaitable<Result> Type Parameters Name Description Result The result type for callback Constructors AsyncHelper(Action) Declaration public AsyncHelper(Action request) Parameters Type Name Description System.Action request Properties IsReady Return if this action already finish Declaration public bool IsReady { get; } Property Value Type Description System.Boolean Methods Callback(Result) Use this method to register the event you want to wait Declaration public void Callback(Result result) Parameters Type Name Description Result result result Request() Raise a request Declaration public void Request() TryGetResult(out Result) Call this method to try to get the method at anytime. It won't return the result if callback is not invoke Declaration public bool TryGetResult(out Result result) Parameters Type Name Description Result result result Returns Type Description System.Boolean if callback is already invoke Wait() Call this to wait as async method Declaration public Task<Result> Wait() Returns Type Description Task <Result> the result Wait(Action<Result>) Call this to wait in coroutine Declaration public IEnumerator Wait(Action<Result> onFinish = null) Parameters Type Name Description System.Action <Result> onFinish when callback is invoke you can use this method to catch the result Returns Type Description System.Collections.Generic.IEnumerator"
  },
  "api/Scream.UniMO.Common.AsyncHelper-2.html": {
    "href": "api/Scream.UniMO.Common.AsyncHelper-2.html",
    "title": "Class AsyncHelper<Input, Result> | UniMO",
    "keywords": "Class AsyncHelper<Input, Result> Listen for event and wait until the event callback invoke as IEnumerator or Async method Inheritance System.Object AsyncHelper<Input, Result> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO.Common Assembly : cs.temp.dll.dll Syntax public class AsyncHelper<Input, Result> : IWaitable<Result> Type Parameters Name Description Input The type for request parameter Result The result type for callback Constructors AsyncHelper(Action<Input>) Declaration public AsyncHelper(Action<Input> request) Parameters Type Name Description System.Action <Input> request Properties IsReady Return if this action already finish Declaration public bool IsReady { get; } Property Value Type Description System.Boolean Methods Callback(Result) Use this method to register the event you want to wait Declaration public void Callback(Result result) Parameters Type Name Description Result result result Request(Input) Raise a request Declaration public void Request(Input data) Parameters Type Name Description Input data the input data TryGetResult(out Result) Call this method to try to get the method at anytime. It won't return the result if callback is not invoke Declaration public bool TryGetResult(out Result result) Parameters Type Name Description Result result result Returns Type Description System.Boolean if callback is already invoke Wait() Call this to wait as async method Declaration public Task<Result> Wait() Returns Type Description Task <Result> the result Wait(Action<Result>) Call this to wait in coroutine Declaration public IEnumerator Wait(Action<Result> onFinish = null) Parameters Type Name Description System.Action <Result> onFinish when callback is invoke you can use this method to catch the result Returns Type Description System.Collections.Generic.IEnumerator"
  },
  "api/Scream.UniMO.Common.DomainEvents.html": {
    "href": "api/Scream.UniMO.Common.DomainEvents.html",
    "title": "Class DomainEvents | UniMO",
    "keywords": "Class DomainEvents This class handles all events. You can raise event register and unregister event use this class Inheritance System.Object DomainEvents Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO.Common Assembly : cs.temp.dll.dll Syntax public static class DomainEvents Methods Clear() Clear all event have subscribed Declaration public static void Clear() Raise<T>(T) Call this method to raise the event Declaration public static void Raise<T>(T args) where T : IDomainEvent Parameters Type Name Description T args argument for this event Type Parameters Name Description T the event type Register<T>(Action<T>) Call this method to subscribe an event Declaration public static void Register<T>(Action<T> callback) where T : IDomainEvent Parameters Type Name Description System.Action <T> callback the callback function to subscribe Type Parameters Name Description T which event you want to subscribe UnRegister<T>(Action<T>) Call this method to unsubscribe Declaration public static void UnRegister<T>(Action<T> callback) where T : IDomainEvent Parameters Type Name Description System.Action <T> callback the callback function to unsubscribe Type Parameters Name Description T which event you want to unsubscribe"
  },
  "api/Scream.UniMO.Common.html": {
    "href": "api/Scream.UniMO.Common.html",
    "title": "Namespace Scream.UniMO.Common | UniMO",
    "keywords": "Namespace Scream.UniMO.Common Classes AsyncHelper Listen for event and wait until the event callback invoke as IEnumerator or Async method AsyncHelper<Result> Listen for event and wait until the event callback invoke as IEnumerator or Async method AsyncHelper<Input, Result> Listen for event and wait until the event callback invoke as IEnumerator or Async method DomainEvents This class handles all events. You can raise event register and unregister event use this class IDomainEvent base type for event argument ProcessTracker Use this class to track a series of action is finish or not TMonoSingleton<T> derived this class to make a class into singleton class which won't be destroyed when scene change TSceneMonoSingleton<T> derived this class to make a class into singleton class which will be destroyed when scene change TSingleton<T> derived this class to make a class into singleton class"
  },
  "api/Scream.UniMO.Common.IDomainEvent.html": {
    "href": "api/Scream.UniMO.Common.IDomainEvent.html",
    "title": "Class IDomainEvent | UniMO",
    "keywords": "Class IDomainEvent base type for event argument Inheritance System.Object IDomainEvent Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO.Common Assembly : cs.temp.dll.dll Syntax public abstract class IDomainEvent"
  },
  "api/Scream.UniMO.Common.ProcessTracker.html": {
    "href": "api/Scream.UniMO.Common.ProcessTracker.html",
    "title": "Class ProcessTracker | UniMO",
    "keywords": "Class ProcessTracker Use this class to track a series of action is finish or not Inheritance System.Object ProcessTracker Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO.Common Assembly : cs.temp.dll.dll Syntax public class ProcessTracker : ICountWaitable, IWaitable Constructors ProcessTracker(Int32, Action) Declaration public ProcessTracker(int steps, Action onFinishAction = null) Parameters Type Name Description System.Int32 steps System.Action onFinishAction Properties IsReady Define action is ready or not Declaration public bool IsReady { get; } Property Value Type Description System.Boolean Percentage The total progression of the work Declaration public float Percentage { get; } Property Value Type Description System.Single Remain How many steps remain Declaration public int Remain { get; } Property Value Type Description System.Int32 Methods Add(Int32) Add more step to this counter Declaration public void Add(int step = 1) Parameters Type Name Description System.Int32 step how many steps to add Reset() Reset this action to start Declaration public void Reset() SetDone() Set a step is already finish Declaration public void SetDone() Wait() Wait an action as async method Declaration public Task Wait() Returns Type Description Task Result Wait(Action) Wait an action in Coroutine Declaration public IEnumerator Wait(Action onFinish = null) Parameters Type Name Description System.Action onFinish Pass the method to catch the result Returns Type Description System.Collections.Generic.IEnumerator"
  },
  "api/Scream.UniMO.Common.TMonoSingleton-1.html": {
    "href": "api/Scream.UniMO.Common.TMonoSingleton-1.html",
    "title": "Class TMonoSingleton<T> | UniMO",
    "keywords": "Class TMonoSingleton<T> derived this class to make a class into singleton class which won't be destroyed when scene change Inheritance System.Object TMonoSingleton<T> MonoHelper SceneLoader Namespace : Scream.UniMO.Common Assembly : cs.temp.dll.dll Syntax public class TMonoSingleton<T> : MonoBehaviour where T : MonoBehaviour Type Parameters Name Description T the class you want to make it as singleton class must derived from monoBehaviour Properties Instance Get the instance of this class Declaration public static T Instance { get; } Property Value Type Description T"
  },
  "api/Scream.UniMO.Common.TSceneMonoSingleton-1.html": {
    "href": "api/Scream.UniMO.Common.TSceneMonoSingleton-1.html",
    "title": "Class TSceneMonoSingleton<T> | UniMO",
    "keywords": "Class TSceneMonoSingleton<T> derived this class to make a class into singleton class which will be destroyed when scene change Inheritance System.Object TSceneMonoSingleton<T> Namespace : Scream.UniMO.Common Assembly : cs.temp.dll.dll Syntax public class TSceneMonoSingleton<T> : MonoBehaviour where T : MonoBehaviour Type Parameters Name Description T the class you want to make it as singleton class must derived from monoBehaviour Properties Instance Get the instance of this class Declaration public static T Instance { get; } Property Value Type Description T Methods Awake() Declaration protected virtual void Awake() OnDestroy() Declaration protected virtual void OnDestroy()"
  },
  "api/Scream.UniMO.Common.TSingleton-1.html": {
    "href": "api/Scream.UniMO.Common.TSingleton-1.html",
    "title": "Class TSingleton<T> | UniMO",
    "keywords": "Class TSingleton<T> derived this class to make a class into singleton class Inheritance System.Object TSingleton<T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO.Common Assembly : cs.temp.dll.dll Syntax public class TSingleton<T> where T : class, new() Type Parameters Name Description T the class you want to make it singleton makesure it has a no parameter constructor Properties Instance Get the instance of this class Declaration public static T Instance { get; } Property Value Type Description T"
  },
  "api/Scream.UniMO.Control.html": {
    "href": "api/Scream.UniMO.Control.html",
    "title": "Namespace Scream.UniMO.Control | UniMO",
    "keywords": "Namespace Scream.UniMO.Control Classes TouchHelper TouchHelper is a class to help developer deal with single finger touch action in touchable device It will use mouse to simulate the touch in Editor phase"
  },
  "api/Scream.UniMO.Control.TouchHelper.html": {
    "href": "api/Scream.UniMO.Control.TouchHelper.html",
    "title": "Class TouchHelper | UniMO",
    "keywords": "Class TouchHelper TouchHelper is a class to help developer deal with single finger touch action in touchable device It will use mouse to simulate the touch in Editor phase Inheritance System.Object TouchHelper Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO.Control Assembly : cs.temp.dll.dll Syntax public class TouchHelper Properties MoveFingerId the moving finger index Declaration public int MoveFingerId { get; } Property Value Type Description System.Int32 TouchCount How many touch at this moment Declaration public static int TouchCount { get; } Property Value Type Description System.Int32 Methods GetCurrentPosition(Int32) Get the screen position of touch Declaration public Vector3 GetCurrentPosition(int index = 0) Parameters Type Name Description System.Int32 index the touch index Returns Type Description Vector3 the position in screen coordinate GetTouch(Int32) Get the details of touch Declaration public Touch GetTouch(int index) Parameters Type Name Description System.Int32 index the touch index Returns Type Description Touch the detail of specific touch IsAnyTouch(out Int32) Check if there is any finger exist Declaration public bool IsAnyTouch(out int index) Parameters Type Name Description System.Int32 index the touch index Returns Type Description System.Boolean any touch happen or not IsAnyTouchDown(out Int32) Check if there is any finger just down Declaration public bool IsAnyTouchDown(out int index) Parameters Type Name Description System.Int32 index the touch index Returns Type Description System.Boolean any touch down happen or not IsAnyTouchTap(out Int32) Check if there is any finger tap if there is finger hold and doen't move unitl it just up it will also be considered as a tap action Declaration public bool IsAnyTouchTap(out int index) Parameters Type Name Description System.Int32 index the touch index Returns Type Description System.Boolean any tap happen or not IsAnyTouchUp(out Int32) Check if there is any finger just exit Declaration public bool IsAnyTouchUp(out int index) Parameters Type Name Description System.Int32 index the touch index Returns Type Description System.Boolean any touch up happen or not Tick() Call this method event frame before you try to access other method it will update all the information Declaration public void Tick()"
  },
  "api/Scream.UniMO.Math.html": {
    "href": "api/Scream.UniMO.Math.html",
    "title": "Namespace Scream.UniMO.Math | UniMO",
    "keywords": "Namespace Scream.UniMO.Math Classes Math"
  },
  "api/Scream.UniMO.Math.Math.html": {
    "href": "api/Scream.UniMO.Math.Math.html",
    "title": "Class Math | UniMO",
    "keywords": "Class Math Inheritance System.Object Math Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO.Math Assembly : cs.temp.dll.dll Syntax public static class Math Methods Between(Single, Single, Single) check if a value between the two value or not Declaration public static bool Between(float value, float a, float b) Parameters Type Name Description System.Single value value to check System.Single a range a System.Single b range b Returns Type Description System.Boolean will return true if the value equal to a or b ChosenDueToProbability(Single, Single) return true if option1 being choose Declaration public static bool ChosenDueToProbability(float probability1, float probability2) Parameters Type Name Description System.Single probability1 probability of option1 System.Single probability2 probability of option2 Returns Type Description System.Boolean return true if option1 being choose ChosenDueToProbability<T>(T, T, Single, Single) return the option due to the percentage will transfer the total of two probability to 100% linearly Declaration public static T ChosenDueToProbability<T>(in T option1, in T option2, float probability1, float probability2) Parameters Type Name Description T option1 first option T option2 second option System.Single probability1 the probability of option1 System.Single probability2 the probability of option2 Returns Type Description T return option been chosen Type Parameters Name Description T type of option GetDegree(Vector2) return the degree due to direction Declaration public static float GetDegree(Vector2 direction) Parameters Type Name Description Vector2 direction direction to convert Returns Type Description System.Single result in float GetDirectionFromDeg(Single) Convert degree to Vector2 Declaration public static Vector2 GetDirectionFromDeg(float degree) Parameters Type Name Description System.Single degree degree value Returns Type Description Vector2 result GetDirectionFromRad(Single) Convert radian to Vector2 Declaration public static Vector2 GetDirectionFromRad(float radian) Parameters Type Name Description System.Single radian radian value Returns Type Description Vector2 result InverseProbability(Single) inverst the probability if give 0.3 will return 0.7 Declaration public static float InverseProbability(float origin) Parameters Type Name Description System.Single origin the probability you want to inverse Returns Type Description System.Single result RandomBool() return a boolean randomly Declaration public static bool RandomBool() Returns Type Description System.Boolean result RandomNum(Int32) return a random integer from 0 to number-1 Declaration public static int RandomNum(int number) Parameters Type Name Description System.Int32 number how many options Returns Type Description System.Int32 which one being selected RandomNum(Single) return a random float from 0.0f to number Declaration public static float RandomNum(float number) Parameters Type Name Description System.Single number the biggest num for this random Returns Type Description System.Single return a random float from 0.0f to number RandomVec2(Single) return a random vector2 Declaration public static Vector2 RandomVec2(float num) Parameters Type Name Description System.Single num biggest value for vector2 field Returns Type Description Vector2 result RandomVec2(Vector2) return a random vector2 Declaration public static Vector2 RandomVec2(Vector2 num) Parameters Type Name Description Vector2 num the biggest value for each field Returns Type Description Vector2 result RandomVec3(Single) return a random vector3 Declaration public static Vector3 RandomVec3(float num) Parameters Type Name Description System.Single num biggest value for vector3 field Returns Type Description Vector3 result RandomVec3(Vector3) return a random vector3 Declaration public static Vector3 RandomVec3(Vector3 num) Parameters Type Name Description Vector3 num the biggest value for each field Returns Type Description Vector3 result"
  },
  "api/Scream.UniMO.Utils.AnimationEventHelper.html": {
    "href": "api/Scream.UniMO.Utils.AnimationEventHelper.html",
    "title": "Class AnimationEventHelper | UniMO",
    "keywords": "Class AnimationEventHelper this is a class can add to gameObject then when animation finished you can use animation event to call AnimationFinished it will broadcast the animation clip it set on animation event who subscribe the event OnAnimationFinshed Inheritance System.Object AnimationEventHelper Namespace : Scream.UniMO.Utils Assembly : cs.temp.dll.dll Syntax public class AnimationEventHelper : MonoBehaviour Properties Animation Animation component Declaration public Animation Animation { get; } Property Value Type Description Animation return animation component this gameobject hold Events OnAnimationFinClip this callback will return a animation clip Declaration public event Action<AnimationClip> OnAnimationFinClip Event Type Type Description System.Action < AnimationClip > OnAnimationFinString this callback will return a string Declaration public event Action<string> OnAnimationFinString Event Type Type Description System.Action < System.String > OnAnimationFinVoid this callback won't return anything Declaration public event Action OnAnimationFinVoid Event Type Type Description System.Action"
  },
  "api/Scream.UniMO.Utils.ColorUtils.html": {
    "href": "api/Scream.UniMO.Utils.ColorUtils.html",
    "title": "Class ColorUtils | UniMO",
    "keywords": "Class ColorUtils utils about color Inheritance System.Object ColorUtils Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO.Utils Assembly : cs.temp.dll.dll Syntax public class ColorUtils Methods HSV2RGB(Vector3) Convert hsv color to rgb Declaration public static Color HSV2RGB(Vector3 hsv) Parameters Type Name Description Vector3 hsv value to convert Returns Type Description Color rgb value as Color RGB2HSV(Color) convert rgb formet to hsv format Declaration public static Vector3 RGB2HSV(Color rgb) Parameters Type Name Description Color rgb value to convert Returns Type Description Vector3 hsv value SetAlpha(Color, Single) Set color's alpha range:0~255 Declaration public static Color SetAlpha(Color rgb, float alpha) Parameters Type Name Description Color rgb original color System.Single alpha new alpha Returns Type Description Color new color SetAlpha01(Color, Single) Set colors alpha range:0~1 Declaration public static Color SetAlpha01(Color rgb, float alpha) Parameters Type Name Description Color rgb original color System.Single alpha new alpha Returns Type Description Color new color SetAlphaHalf(Color) Set alpha of color to half Declaration public static Color SetAlphaHalf(Color rgb) Parameters Type Name Description Color rgb original color Returns Type Description Color new color"
  },
  "api/Scream.UniMO.Utils.GameObjectExtension.html": {
    "href": "api/Scream.UniMO.Utils.GameObjectExtension.html",
    "title": "Class GameObjectExtension | UniMO",
    "keywords": "Class GameObjectExtension Extension method for Unity basic object. Inheritance System.Object GameObjectExtension Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO.Utils Assembly : cs.temp.dll.dll Syntax public static class GameObjectExtension Methods GetComponentLog<T>(Component) GetComponet and will print log in error when can't find component Declaration public static T GetComponentLog<T>(this Component component) where T : Component Parameters Type Name Description Component component Type of component Returns Type Description T return the component. Will return null when can't find the component Type Parameters Name Description T GetComponentLog<T>(GameObject) GetComponet and will print log in error when can't find component Declaration public static T GetComponentLog<T>(this GameObject gameObject) where T : Component Parameters Type Name Description GameObject gameObject Returns Type Description T return the component. Will return null when can't find the component Type Parameters Name Description T Type of component"
  },
  "api/Scream.UniMO.Utils.html": {
    "href": "api/Scream.UniMO.Utils.html",
    "title": "Namespace Scream.UniMO.Utils | UniMO",
    "keywords": "Namespace Scream.UniMO.Utils Classes AnimationEventHelper this is a class can add to gameObject then when animation finished you can use animation event to call AnimationFinished it will broadcast the animation clip it set on animation event who subscribe the event OnAnimationFinshed ColorUtils utils about color GameObjectExtension Extension method for Unity basic object. JsonFileUtility Utils about json file MonoHelper this class is inherit from MonoBehaviour you can subscribe for mono event use this class even if your class isn't inherit from MonoBehaviour ScaledTimer a countdown timer easy to use affected by TimeScale call method Reset to reset timer and call property IsFinshed to check if countdown finished SceneLoader This is a easy implement for multiscene loader. UnityUIExtension UnscaledTimer a countdown timer easy to use not affected by TimeScale call method Reset to reset timer and call property IsFinshed to check if countdown finished"
  },
  "api/Scream.UniMO.Utils.JsonFileUtility.html": {
    "href": "api/Scream.UniMO.Utils.JsonFileUtility.html",
    "title": "Class JsonFileUtility | UniMO",
    "keywords": "Class JsonFileUtility Utils about json file Inheritance System.Object JsonFileUtility Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO.Utils Assembly : cs.temp.dll.dll Syntax public class JsonFileUtility Methods CreateJsonFile<T>(T, String, String) Create a json file to specific path by custom object Declaration public static void CreateJsonFile<T>(T obj, string path, string fileName) Parameters Type Name Description T obj object wants to convert to json file System.String path path for json file System.String fileName file name for json file Type Parameters Name Description T type of original object Load<T>(String) load json file from path and convert to specific type Declaration public static T Load<T>(string path) Parameters Type Name Description System.String path path of json file Returns Type Description T result Type Parameters Name Description T type want to convert to"
  },
  "api/Scream.UniMO.Utils.MonoHelper.html": {
    "href": "api/Scream.UniMO.Utils.MonoHelper.html",
    "title": "Class MonoHelper | UniMO",
    "keywords": "Class MonoHelper this class is inherit from MonoBehaviour you can subscribe for mono event use this class even if your class isn't inherit from MonoBehaviour Inheritance System.Object TMonoSingleton < MonoHelper > MonoHelper Inherited Members TMonoSingleton<MonoHelper>.Instance Namespace : Scream.UniMO.Utils Assembly : cs.temp.dll.dll Syntax public class MonoHelper : TMonoSingleton<MonoHelper> Events OnApplicationQuitAction Declaration public event Action OnApplicationQuitAction Event Type Type Description System.Action OnAwakeAction Declaration public event Action OnAwakeAction Event Type Type Description System.Action OnDestroyAction Declaration public event Action OnDestroyAction Event Type Type Description System.Action OnDisableAction Declaration public event Action OnDisableAction Event Type Type Description System.Action OnEnableAction Declaration public event Action OnEnableAction Event Type Type Description System.Action OnFixedUpdateAction Declaration public event Action OnFixedUpdateAction Event Type Type Description System.Action OnLateUpdateAction Declaration public event Action OnLateUpdateAction Event Type Type Description System.Action OnStartAction Declaration public event Action OnStartAction Event Type Type Description System.Action OnUpdateAction Declaration public event Action OnUpdateAction Event Type Type Description System.Action"
  },
  "api/Scream.UniMO.Utils.ScaledTimer.html": {
    "href": "api/Scream.UniMO.Utils.ScaledTimer.html",
    "title": "Class ScaledTimer | UniMO",
    "keywords": "Class ScaledTimer a countdown timer easy to use affected by TimeScale call method Reset to reset timer and call property IsFinshed to check if countdown finished Inheritance System.Object ScaledTimer Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO.Utils Assembly : cs.temp.dll.dll Syntax [Serializable] public class ScaledTimer Constructors ScaledTimer(Single, Boolean) Constructor Declaration public ScaledTimer(float timeSection = 0F, bool CanUseFirst = true) Parameters Type Name Description System.Single timeSection time section for this timer System.Boolean CanUseFirst isFinshed equals to true at first or not Properties IsFinished if this countdown finished or not Declaration public bool IsFinished { get; } Property Value Type Description System.Boolean IsPausing timer is in pause state Declaration public bool IsPausing { get; } Property Value Type Description System.Boolean Remain remaining time until the countdown end Declaration public float Remain { get; } Property Value Type Description System.Single Remain01 return the cd range from 0 to 1 0 means timer finished Declaration public float Remain01 { get; } Property Value Type Description System.Single Methods Pause() Pause this timer Declaration public void Pause() Reset() Reset countdown timer with default setting Declaration public void Reset() Reset(Single) reset countdown timer with new timeSection Declaration public void Reset(float timeSection) Parameters Type Name Description System.Single timeSection new time section for this timer Resume() Resume this timer Declaration public void Resume()"
  },
  "api/Scream.UniMO.Utils.SceneLoader.html": {
    "href": "api/Scream.UniMO.Utils.SceneLoader.html",
    "title": "Class SceneLoader | UniMO",
    "keywords": "Class SceneLoader This is a easy implement for multiscene loader. Inheritance System.Object TMonoSingleton < SceneLoader > SceneLoader Inherited Members TMonoSingleton<SceneLoader>.Instance Namespace : Scream.UniMO.Utils Assembly : cs.temp.dll.dll Syntax public class SceneLoader : TMonoSingleton<SceneLoader> Methods LoadScenesAsync(Action, Action<Single>, String[]) Load all the scenes in async all scene are loaded in additive mode Declaration public IEnumerator LoadScenesAsync(Action onFinish = null, Action<float> onProgress = null, params string[] scenes) Parameters Type Name Description System.Action onFinish callback when finish System.Action < System.Single > onProgress return the progress of this action System.String [] scenes the scenes you want to load Returns Type Description System.Collections.Generic.IEnumerator LoadScenesAsync(String, Action, Action<Single>, String[]) Load all the scenes in async. And will load the main scene first. Other scene will be loaded in additive mode Declaration public IEnumerator LoadScenesAsync(string mainScene, Action onFinish = null, Action<float> onProgress = null, params string[] scenes) Parameters Type Name Description System.String mainScene name of main scene System.Action onFinish callback when finish System.Action < System.Single > onProgress return the progress of this action System.String [] scenes the scenes you want to load in additive Returns Type Description System.Collections.Generic.IEnumerator"
  },
  "api/Scream.UniMO.Utils.UnityUIExtension.html": {
    "href": "api/Scream.UniMO.Utils.UnityUIExtension.html",
    "title": "Class UnityUIExtension | UniMO",
    "keywords": "Class UnityUIExtension Inheritance System.Object UnityUIExtension Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO.Utils Assembly : cs.temp.dll.dll Syntax public static class UnityUIExtension Methods SetImg(Image, Sprite) Set value of a image component and will ignore when component doesn't exist. Declaration public static void SetImg(this Image image, Sprite sprite) Parameters Type Name Description Image image Sprite sprite the sprite you want to set to this image.null is valid value SetText<T>(Text, T) Set value of a text component and will ignore when component doesn't exist. Declaration public static void SetText<T>(this Text text, T context) Parameters Type Name Description Text text T context the value you want to set Type Parameters Name Description T"
  },
  "api/Scream.UniMO.Utils.UnscaledTimer.html": {
    "href": "api/Scream.UniMO.Utils.UnscaledTimer.html",
    "title": "Class UnscaledTimer | UniMO",
    "keywords": "Class UnscaledTimer a countdown timer easy to use not affected by TimeScale call method Reset to reset timer and call property IsFinshed to check if countdown finished Inheritance System.Object UnscaledTimer Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO.Utils Assembly : cs.temp.dll.dll Syntax [Serializable] public class UnscaledTimer Constructors UnscaledTimer(Single, Boolean) Constructor Declaration public UnscaledTimer(float timeSection = 0F, bool CanUseFirst = true) Parameters Type Name Description System.Single timeSection time section for this timer System.Boolean CanUseFirst isFinshed equals to true at first or not Properties IsFinished if this countdown finished or not Declaration public bool IsFinished { get; } Property Value Type Description System.Boolean IsPausing timer is in pause state Declaration public bool IsPausing { get; } Property Value Type Description System.Boolean Remain remaining time until the countdown end Declaration public float Remain { get; } Property Value Type Description System.Single Remain01 return the cd range from 0 to 1 0 means timer finished Declaration public float Remain01 { get; } Property Value Type Description System.Single Methods Pause() Pause this timer Declaration public void Pause() Reset() Reset countdown timer with default setting Declaration public void Reset() Reset(Single) reset countdown timer with new timeSection Declaration public void Reset(float timeSection) Parameters Type Name Description System.Single timeSection new time section for this timer Resume() Resume this timer Declaration public void Resume()"
  },
  "api/Scream.UniMO.Utils2D.HitDirection.html": {
    "href": "api/Scream.UniMO.Utils2D.HitDirection.html",
    "title": "Enum HitDirection | UniMO",
    "keywords": "Enum HitDirection contains four direction and a none direction Namespace : Scream.UniMO.Utils2D Assembly : cs.temp.dll.dll Syntax public enum HitDirection Fields Name Description Down Left None Right Up"
  },
  "api/Scream.UniMO.Utils2D.HitResult.html": {
    "href": "api/Scream.UniMO.Utils2D.HitResult.html",
    "title": "Class HitResult | UniMO",
    "keywords": "Class HitResult hit result about raycast Inheritance System.Object HitResult Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO.Utils2D Assembly : cs.temp.dll.dll Syntax [Serializable] public class HitResult Constructors HitResult(RaycastHit2D, HitDirection, Vector2) constructor Declaration public HitResult(RaycastHit2D hit2D, HitDirection direction, Vector2 detailPos) Parameters Type Name Description RaycastHit2D hit2D hit result in raycasthit2d HitDirection direction Vector2 detailPos which ray hits the object Fields DetailPos which ray hits the object Declaration public Vector2 DetailPos Field Value Type Description Vector2 Direction which direction hits the object Declaration public HitDirection Direction Field Value Type Description HitDirection Hit2D the hit result in raycasthit2d Declaration public RaycastHit2D Hit2D Field Value Type Description RaycastHit2D"
  },
  "api/Scream.UniMO.Utils2D.html": {
    "href": "api/Scream.UniMO.Utils2D.html",
    "title": "Namespace Scream.UniMO.Utils2D | UniMO",
    "keywords": "Namespace Scream.UniMO.Utils2D Classes HitResult hit result about raycast ParallaxBG This is a parallax background set bg object postion.x due to its z position you can have lots of bg object at the same time ref: https://www.youtube.com/watch?v=5E5_Fquw7BM RayCastController Class to shoot raycast around a box collider return all raycast result Render2D utils for render in 2d Enums HitDirection contains four direction and a none direction"
  },
  "api/Scream.UniMO.Utils2D.ParallaxBG.html": {
    "href": "api/Scream.UniMO.Utils2D.ParallaxBG.html",
    "title": "Class ParallaxBG | UniMO",
    "keywords": "Class ParallaxBG This is a parallax background set bg object postion.x due to its z position you can have lots of bg object at the same time ref: https://www.youtube.com/watch?v=5E5_Fquw7BM Inheritance System.Object ParallaxBG Namespace : Scream.UniMO.Utils2D Assembly : cs.temp.dll.dll Syntax public class ParallaxBG : MonoBehaviour"
  },
  "api/Scream.UniMO.Utils2D.RayCastController.html": {
    "href": "api/Scream.UniMO.Utils2D.RayCastController.html",
    "title": "Class RayCastController | UniMO",
    "keywords": "Class RayCastController Class to shoot raycast around a box collider return all raycast result Inheritance System.Object RayCastController Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO.Utils2D Assembly : cs.temp.dll.dll Syntax [Serializable] public class RayCastController Constructors RayCastController(LayerMask, Vector2, Single, Single, BoxCollider2D) Constructor Declaration public RayCastController(LayerMask layers, Vector2 rayNums, float offset, float rayLength, BoxCollider2D collider2D) Parameters Type Name Description LayerMask layers layers should rays detect Vector2 rayNums how many rays will cast in one direction every time System.Single offset offset from center point System.Single rayLength length of rays BoxCollider2D collider2D which collider to be the reference Properties Down if there is anything hits in down direction of this object Declaration public bool Down { get; } Property Value Type Description System.Boolean IsCollide if object collides with any objects Declaration public bool IsCollide { get; } Property Value Type Description System.Boolean result Left if there is anything hits in left direction of this object Declaration public bool Left { get; } Property Value Type Description System.Boolean Result Contains all hit result from four direcion Declaration public List<HitResult> Result { get; } Property Value Type Description System.Collections.Generic.List < HitResult > Right if there is anything hits in right direction of this object Declaration public bool Right { get; } Property Value Type Description System.Boolean Up if there is anything hits in up direction of this object Declaration public bool Up { get; } Property Value Type Description System.Boolean Methods Init(BoxCollider2D) MUST Call this method to init raycastcontroller if you set value in inspector Declaration public void Init(BoxCollider2D collider2D) Parameters Type Name Description BoxCollider2D collider2D which collider to be the reference Tick() Call this method to update information about hit result Declaration public void Tick()"
  },
  "api/Scream.UniMO.Utils2D.Render2D.html": {
    "href": "api/Scream.UniMO.Utils2D.Render2D.html",
    "title": "Class Render2D | UniMO",
    "keywords": "Class Render2D utils for render in 2d Inheritance System.Object Render2D Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO.Utils2D Assembly : cs.temp.dll.dll Syntax public static class Render2D Methods ChangeDirection(Boolean, Transform, Boolean) flip target due to IsFacingRight Declaration public static void ChangeDirection(bool IsFacingRight, Transform target, bool IsInvert = false) Parameters Type Name Description System.Boolean IsFacingRight is target facing at right direction Transform target which transform to change System.Boolean IsInvert ChangeDirectionXWithSpriteRender(Boolean, SpriteRenderer, Boolean) flip target Declaration public static void ChangeDirectionXWithSpriteRender(bool flipX, SpriteRenderer renderer, bool IsInvert = false) Parameters Type Name Description System.Boolean flipX flipX or not SpriteRenderer renderer ref for target renderer System.Boolean IsInvert invert the result or not ChangeDirectionY(Boolean, Transform, Boolean) flip target due to IsFacingRight Declaration public static void ChangeDirectionY(bool IsFacingRight, Transform target, bool IsInvert = false) Parameters Type Name Description System.Boolean IsFacingRight is target facing at right direction Transform target which transform to change System.Boolean IsInvert invert the result or not ChangeDirectionYWithSpriteRender(Boolean, SpriteRenderer, Boolean) flip target Declaration public static void ChangeDirectionYWithSpriteRender(bool flipY, SpriteRenderer renderer, bool IsInvert = false) Parameters Type Name Description System.Boolean flipY flipY or not SpriteRenderer renderer ref for target renderer System.Boolean IsInvert invert the result or not"
  },
  "index.html": {
    "href": "index.html",
    "title": "UniMO | UniMO",
    "keywords": "UniMO Utils collection for Unity API References UniMO's API References are hosted at scream870102.github.io/UniMO by DocFX License This library is under the MIT License ."
  },
  "manual/changelog.html": {
    "href": "manual/changelog.html",
    "title": "Changelog | UniMO",
    "keywords": "Changelog 1.8.0 Add GameObjectExtension 1.7.0 Add TMonoSingleton Add TSceneMonoSingleton Add TSingleton Add MonoHelper Add SceneLoader Add UnitUIExtension Update AsyncHelper Update ProcessTracker 1.6.1 Fix AsyncHelper Bug 1.6.0 Add AsyncHelper in Scream.UniMO.Common Add ProcessTracker in Scream.UniMO.Common Add IWaitable in Scream.UniMO.Common Add TouchHelper in Scream.UniMO.Control Move DomainEvents to Scream.UniMO.Common Move GetInstanceID and ReadOnlyAttribute to Scream.UniMO.Editor.Utils Move Timer and TSingletonMonoBehaviour to Scream.UniMO.Utils Fix Container error Rename AnimationEventHandler to AnimationEventHelper 1.5.0 Update Container in Scream.UniMO.Collection Delete ObjectContainer in Scream.UniMO.Collection Update PrefabContainer in Scream.UniMO.Collection 1.4.0 Delete ConsoleButton Update Direction in Scream.UniMO.Utils2D Update some Naming Conventions 1.3.1 Update PrefabContainer AssetMenu update 1.3.0 Add Scream.UniMO.Collections.PrefabContainer Add Scream.UniMO.Collections.Container Add Scream.UniMO.Collections.ObjectContainer 1.2.1 Fix save package.json with UTF8 1.2.0 Timer Add bool IsPausing timer is in pause state Pause() Pause this timer Resume() Resume this timer Update bool IsFinished will keep false when timer is in pause state 1.1.0 Add JsonFileUtility 1.0.2 Fix Scream.UniMO.Editor Build Error 1.0.1 Disable Scream.UniMO.Input.GamepadController"
  },
  "manual/unimo_manual.html": {
    "href": "manual/unimo_manual.html",
    "title": "UniMO Manual | UniMO",
    "keywords": "UniMO Manual UNDER CONSTRUCTION How to use Open Package Manager in your unity editor Copy this https://github.com/scream870102/UniMO.git Paste the url and click add Source Code"
  }
}