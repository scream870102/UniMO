{
  "api/Scream.UniMO.Collections.Container-2.html": {
    "href": "api/Scream.UniMO.Collections.Container-2.html",
    "title": "Class Container<T, U> | UniMO",
    "keywords": "Class Container<T, U> Use this scriptableobject to store all object you need. Inherit this class to fit your own object Inheritance System.Object Container<T, U> PrefabContainer Namespace : Scream.UniMO.Collections Assembly : cs.temp.dll.dll Syntax public class Container<T, U> : ScriptableObject where T : IConvertible Type Parameters Name Description T type of key U type of target object Fields Objects Store your objects and key here Declaration public ObjectContainer<T, U>[] Objects Field Value Type Description ObjectContainer <T, U>[] Methods ToDictionary() Convert to dictionary Declaration public virtual Dictionary<T, U> ToDictionary() Returns Type Description Dictionary <T, U> Convert Objects to dictionary ToList() Convert to list and ignore key Declaration public virtual List<U> ToList() Returns Type Description List <U> convert the array of Objects to list"
  },
  "api/Scream.UniMO.Collections.html": {
    "href": "api/Scream.UniMO.Collections.html",
    "title": "Namespace Scream.UniMO.Collections | UniMO",
    "keywords": "Namespace Scream.UniMO.Collections Classes Container<T, U> Use this scriptableobject to store all object you need. Inherit this class to fit your own object ObjectContainer<T, U> Container Type ObjectPool ObjectPool is the class to handle object recycle and spawn PrefabContainer Use this scriptableobject to store all prefab you need. Interfaces IObjectPoolAble Inherit this interface make objects can be managed by class ObjectPool"
  },
  "api/Scream.UniMO.Collections.IObjectPoolAble.html": {
    "href": "api/Scream.UniMO.Collections.IObjectPoolAble.html",
    "title": "Interface IObjectPoolAble | UniMO",
    "keywords": "Interface IObjectPoolAble Inherit this interface make objects can be managed by class ObjectPool Namespace : Scream.UniMO.Collections Assembly : cs.temp.dll.dll Syntax public interface IObjectPoolAble Properties GameObject The gameobject of pool object Declaration GameObject GameObject { get; set; } Property Value Type Description GameObject Pool which pool is object belongs to Declaration ObjectPool Pool { get; set; } Property Value Type Description ObjectPool Methods Init<T>(T) Call this method to init data of object Declaration void Init<T>(T data) Parameters Type Name Description T data data Type Parameters Name Description T type of data Recycle() Call this method to recycle object back to pool Declaration void Recycle()"
  },
  "api/Scream.UniMO.Collections.ObjectContainer-2.html": {
    "href": "api/Scream.UniMO.Collections.ObjectContainer-2.html",
    "title": "Class ObjectContainer<T, U> | UniMO",
    "keywords": "Class ObjectContainer<T, U> Container Type Inheritance System.Object ObjectContainer<T, U> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO.Collections Assembly : cs.temp.dll.dll Syntax public class ObjectContainer<T, U> where T : IConvertible Type Parameters Name Description T type of key U type of object Fields Key Declaration public T Key Field Value Type Description T Object Declaration public U Object Field Value Type Description U"
  },
  "api/Scream.UniMO.Collections.ObjectPool.html": {
    "href": "api/Scream.UniMO.Collections.ObjectPool.html",
    "title": "Class ObjectPool | UniMO",
    "keywords": "Class ObjectPool ObjectPool is the class to handle object recycle and spawn Inheritance System.Object ObjectPool Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO.Collections Assembly : cs.temp.dll.dll Syntax [Serializable] public class ObjectPool Constructors ObjectPool(GameObject, Transform, Int32, Boolean) use this to set NECESSARY data via script You can also set data through inspector but should call init by self Declaration public ObjectPool(GameObject pooledObject, Transform poolParent, int pooledAmount = 1, bool isGrow = true) Parameters Type Name Description GameObject pooledObject object to spawn Transform poolParent parent for poolobjct System.Int32 pooledAmount how many object can pool hold System.Boolean isGrow can pool spawn new object when pool is empty Fields IsGrow define if pool will spawn new object when pool is empty Declaration public bool IsGrow Field Value Type Description System.Boolean PooledAmount How many item can pool hold Declaration public int PooledAmount Field Value Type Description System.Int32 PooledObject Object to spawn Declaration public GameObject PooledObject Field Value Type Description GameObject PoolParent Parent for all pool objects can be null Declaration public Transform PoolParent Field Value Type Description Transform Properties IsAvailable Call this property to check pool holds anything now Declaration public bool IsAvailable { get; } Property Value Type Description System.Boolean Methods GetPooledObject<T>(T) Return pool object from pool Declaration public IObjectPoolAble GetPooledObject<T>(T data) Parameters Type Name Description T data data for init pool object Returns Type Description IObjectPoolAble the pool object it will be null when pool is empty Type Parameters Name Description T init data type Init() Spawn all objects according to pooledAmount MUST CALL this method if you set data with inspector not constructor Declaration public void Init() RecycleObject(IObjectPoolAble) Recycle Object to Pooling again Declaration public void RecycleObject(IObjectPoolAble item) Parameters Type Name Description IObjectPoolAble item which item will be Recycle to ObjectPooling"
  },
  "api/Scream.UniMO.Collections.PrefabContainer.html": {
    "href": "api/Scream.UniMO.Collections.PrefabContainer.html",
    "title": "Class PrefabContainer | UniMO",
    "keywords": "Class PrefabContainer Use this scriptableobject to store all prefab you need. Inheritance System.Object Container < System.String , Object > PrefabContainer Inherited Members Container<String, Object>.Objects Container<String, Object>.ToList() Container<String, Object>.ToDictionary() Namespace : Scream.UniMO.Collections Assembly : cs.temp.dll.dll Syntax public class PrefabContainer : Container<string, Object> Methods ToDictionary<T, U>() Convert key from string to basic type Declaration public Dictionary<T, U> ToDictionary<T, U>() where T : IConvertible where U : Object Returns Type Description Dictionary <T, U> Convert key to specif type and return as dictionary Type Parameters Name Description T Target key type U Object type ToList<T>() Convert object to other type Declaration public List<T> ToList<T>() where T : Object Returns Type Description List <T> Objects list Type Parameters Name Description T target type of object"
  },
  "api/Scream.UniMO.DomainEvents.html": {
    "href": "api/Scream.UniMO.DomainEvents.html",
    "title": "Class DomainEvents | UniMO",
    "keywords": "Class DomainEvents This class handles all events. You can raise event register and unregister event use this class Inheritance System.Object DomainEvents Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO Assembly : cs.temp.dll.dll Syntax public static class DomainEvents Methods Clear() Clear all event have subscribed Declaration public static void Clear() Raise<T>(T) Call this method to raise the event Declaration public static void Raise<T>(T args) where T : IDomainEvent Parameters Type Name Description T args argument for this event Type Parameters Name Description T the event type Register<T>(Action<T>) Call this method to subscribe an event Declaration public static void Register<T>(Action<T> callback) where T : IDomainEvent Parameters Type Name Description Action <T> callback the callback function to subscribe Type Parameters Name Description T which event you want to subscribe UnRegister<T>(Action<T>) Call this method to unsubscribe Declaration public static void UnRegister<T>(Action<T> callback) where T : IDomainEvent Parameters Type Name Description Action <T> callback the callback function to unsubscribe Type Parameters Name Description T which event you want to unsubscribe"
  },
  "api/Scream.UniMO.Editor.GetInstanceID.html": {
    "href": "api/Scream.UniMO.Editor.GetInstanceID.html",
    "title": "Class GetInstanceID | UniMO",
    "keywords": "Class GetInstanceID Use this class to get object instance id You can also get id in editor mode Inheritance System.Object GetInstanceID Namespace : Scream.UniMO.Editor Assembly : cs.temp.dll.dll Syntax public class GetInstanceID : MonoBehaviour Methods GetID() Call this method to get instance id Declaration public void GetID()"
  },
  "api/Scream.UniMO.Editor.GetInStanceIDEditor.html": {
    "href": "api/Scream.UniMO.Editor.GetInStanceIDEditor.html",
    "title": "Class GetInStanceIDEditor | UniMO",
    "keywords": "Class GetInStanceIDEditor Inheritance System.Object GetInStanceIDEditor Namespace : Scream.UniMO.Editor Assembly : cs.temp.dll.dll Syntax public class GetInStanceIDEditor : UnityEditor.Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Scream.UniMO.Editor.html": {
    "href": "api/Scream.UniMO.Editor.html",
    "title": "Namespace Scream.UniMO.Editor | UniMO",
    "keywords": "Namespace Scream.UniMO.Editor Classes GetInstanceID Use this class to get object instance id You can also get id in editor mode GetInStanceIDEditor ReadOnlyAttribute Add this property to make field become readonly in inspector ReadOnlyDrawer"
  },
  "api/Scream.UniMO.Editor.ReadOnlyAttribute.html": {
    "href": "api/Scream.UniMO.Editor.ReadOnlyAttribute.html",
    "title": "Class ReadOnlyAttribute | UniMO",
    "keywords": "Class ReadOnlyAttribute Add this property to make field become readonly in inspector Inheritance System.Object ReadOnlyAttribute Namespace : Scream.UniMO.Editor Assembly : cs.temp.dll.dll Syntax public class ReadOnlyAttribute : PropertyAttribute"
  },
  "api/Scream.UniMO.Editor.ReadOnlyDrawer.html": {
    "href": "api/Scream.UniMO.Editor.ReadOnlyDrawer.html",
    "title": "Class ReadOnlyDrawer | UniMO",
    "keywords": "Class ReadOnlyDrawer Inheritance System.Object ReadOnlyDrawer Namespace : Scream.UniMO.Editor Assembly : cs.temp.dll.dll Syntax public class ReadOnlyDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description System.Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Scream.UniMO.html": {
    "href": "api/Scream.UniMO.html",
    "title": "Namespace Scream.UniMO | UniMO",
    "keywords": "Namespace Scream.UniMO Classes DomainEvents This class handles all events. You can raise event register and unregister event use this class IDomainEvent base type for event argument Math ScaledTimer a countdown timer easy to use affected by TimeScale call method Reset to reset timer and call property IsFinshed to check if countdown finished TSingletonMonoBehavior<T> derived this class then you will got a monobehavior implement singleton TSingletonMonoBehaviorDestroy<T> derived this class then you will got a monobehavior implement singleton however you can reassign instance value and it will destory old one if it exists UnscaledTimer a countdown timer easy to use not affected by TimeScale call method Reset to reset timer and call property IsFinshed to check if countdown finished"
  },
  "api/Scream.UniMO.IDomainEvent.html": {
    "href": "api/Scream.UniMO.IDomainEvent.html",
    "title": "Class IDomainEvent | UniMO",
    "keywords": "Class IDomainEvent base type for event argument Inheritance System.Object IDomainEvent Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO Assembly : cs.temp.dll.dll Syntax public abstract class IDomainEvent"
  },
  "api/Scream.UniMO.Math.html": {
    "href": "api/Scream.UniMO.Math.html",
    "title": "Class Math | UniMO",
    "keywords": "Class Math Inheritance System.Object Math Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO Assembly : cs.temp.dll.dll Syntax public static class Math Methods Between(Single, Single, Single) check if a value between the two value or not Declaration public static bool Between(float value, float a, float b) Parameters Type Name Description System.Single value value to check System.Single a range a System.Single b range b Returns Type Description System.Boolean will return true if the value equal to a or b ChosenDueToProbability(Single, Single) return true if option1 being choose Declaration public static bool ChosenDueToProbability(float probability1, float probability2) Parameters Type Name Description System.Single probability1 probability of option1 System.Single probability2 probability of option2 Returns Type Description System.Boolean return true if option1 being choose ChosenDueToProbability<T>(T, T, Single, Single) return the option due to the percentage will transfer the total of two probability to 100% linearly Declaration public static T ChosenDueToProbability<T>(in T option1, in T option2, float probability1, float probability2) Parameters Type Name Description T option1 first option T option2 second option System.Single probability1 the probability of option1 System.Single probability2 the probability of option2 Returns Type Description T return option been chosen Type Parameters Name Description T type of option GetDegree(Vector2) return the degree due to direction Declaration public static float GetDegree(Vector2 direction) Parameters Type Name Description Vector2 direction direction to convert Returns Type Description System.Single result in float GetDirectionFromDeg(Single) Convert degree to Vector2 Declaration public static Vector2 GetDirectionFromDeg(float degree) Parameters Type Name Description System.Single degree degree value Returns Type Description Vector2 result GetDirectionFromRad(Single) Convert radian to Vector2 Declaration public static Vector2 GetDirectionFromRad(float radian) Parameters Type Name Description System.Single radian radian value Returns Type Description Vector2 result InverseProbability(Single) inverst the probability if give 0.3 will return 0.7 Declaration public static float InverseProbability(float origin) Parameters Type Name Description System.Single origin the probability you want to inverse Returns Type Description System.Single result RandomBool() return a boolean randomly Declaration public static bool RandomBool() Returns Type Description System.Boolean result RandomNum(Int32) return a random integer from 0 to number-1 Declaration public static int RandomNum(int number) Parameters Type Name Description System.Int32 number how many options Returns Type Description System.Int32 which one being selected RandomNum(Single) return a random float from 0.0f to number Declaration public static float RandomNum(float number) Parameters Type Name Description System.Single number the biggest num for this random Returns Type Description System.Single return a random float from 0.0f to number RandomVec2(Single) return a random vector2 Declaration public static Vector2 RandomVec2(float num) Parameters Type Name Description System.Single num biggest value for vector2 field Returns Type Description Vector2 result RandomVec2(Vector2) return a random vector2 Declaration public static Vector2 RandomVec2(Vector2 num) Parameters Type Name Description Vector2 num the biggest value for each field Returns Type Description Vector2 result RandomVec3(Single) return a random vector3 Declaration public static Vector3 RandomVec3(float num) Parameters Type Name Description System.Single num biggest value for vector3 field Returns Type Description Vector3 result RandomVec3(Vector3) return a random vector3 Declaration public static Vector3 RandomVec3(Vector3 num) Parameters Type Name Description Vector3 num the biggest value for each field Returns Type Description Vector3 result"
  },
  "api/Scream.UniMO.ScaledTimer.html": {
    "href": "api/Scream.UniMO.ScaledTimer.html",
    "title": "Class ScaledTimer | UniMO",
    "keywords": "Class ScaledTimer a countdown timer easy to use affected by TimeScale call method Reset to reset timer and call property IsFinshed to check if countdown finished Inheritance System.Object ScaledTimer Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO Assembly : cs.temp.dll.dll Syntax [Serializable] public class ScaledTimer Constructors ScaledTimer(Single, Boolean) Constructor Declaration public ScaledTimer(float timeSection = 0F, bool CanUseFirst = true) Parameters Type Name Description System.Single timeSection time section for this timer System.Boolean CanUseFirst isFinshed equals to true at first or not Properties IsFinished if this countdown finished or not Declaration public bool IsFinished { get; } Property Value Type Description System.Boolean IsPausing timer is in pause state Declaration public bool IsPausing { get; } Property Value Type Description System.Boolean Remain remaining time until the countdown end Declaration public float Remain { get; } Property Value Type Description System.Single Remain01 return the cd range from 0 to 1 0 means timer finished Declaration public float Remain01 { get; } Property Value Type Description System.Single Methods Pause() Pause this timer Declaration public void Pause() Reset() Reset countdown timer with default setting Declaration public void Reset() Reset(Single) reset countdown timer with new timeSection Declaration public void Reset(float timeSection) Parameters Type Name Description System.Single timeSection new time section for this timer Resume() Resume this timer Declaration public void Resume()"
  },
  "api/Scream.UniMO.TSingletonMonoBehavior-1.html": {
    "href": "api/Scream.UniMO.TSingletonMonoBehavior-1.html",
    "title": "Class TSingletonMonoBehavior<T> | UniMO",
    "keywords": "Class TSingletonMonoBehavior<T> derived this class then you will got a monobehavior implement singleton Inheritance System.Object TSingletonMonoBehavior<T> Namespace : Scream.UniMO Assembly : cs.temp.dll.dll Syntax public class TSingletonMonoBehavior<T> : MonoBehaviour where T : MonoBehaviour Type Parameters Name Description T Target type to convert to singleton Properties Instance instance for this type Declaration public static T Instance { get; set; } Property Value Type Description T object of this class Methods Awake() Declaration protected virtual void Awake() OnDestroy() Declaration protected virtual void OnDestroy()"
  },
  "api/Scream.UniMO.TSingletonMonoBehaviorDestroy-1.html": {
    "href": "api/Scream.UniMO.TSingletonMonoBehaviorDestroy-1.html",
    "title": "Class TSingletonMonoBehaviorDestroy<T> | UniMO",
    "keywords": "Class TSingletonMonoBehaviorDestroy<T> derived this class then you will got a monobehavior implement singleton however you can reassign instance value and it will destory old one if it exists Inheritance System.Object TSingletonMonoBehaviorDestroy<T> Namespace : Scream.UniMO Assembly : cs.temp.dll.dll Syntax public class TSingletonMonoBehaviorDestroy<T> : MonoBehaviour where T : MonoBehaviour Type Parameters Name Description T Target type to convert to singleton Properties Instance instance for this type Declaration public static T Instance { get; set; } Property Value Type Description T object of this class Methods Awake() Declaration protected virtual void Awake() OnDestroy() Declaration protected virtual void OnDestroy()"
  },
  "api/Scream.UniMO.UnscaledTimer.html": {
    "href": "api/Scream.UniMO.UnscaledTimer.html",
    "title": "Class UnscaledTimer | UniMO",
    "keywords": "Class UnscaledTimer a countdown timer easy to use not affected by TimeScale call method Reset to reset timer and call property IsFinshed to check if countdown finished Inheritance System.Object UnscaledTimer Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO Assembly : cs.temp.dll.dll Syntax [Serializable] public class UnscaledTimer Constructors UnscaledTimer(Single, Boolean) Constructor Declaration public UnscaledTimer(float timeSection = 0F, bool CanUseFirst = true) Parameters Type Name Description System.Single timeSection time section for this timer System.Boolean CanUseFirst isFinshed equals to true at first or not Properties IsFinished if this countdown finished or not Declaration public bool IsFinished { get; } Property Value Type Description System.Boolean IsPausing timer is in pause state Declaration public bool IsPausing { get; } Property Value Type Description System.Boolean Remain remaining time until the countdown end Declaration public float Remain { get; } Property Value Type Description System.Single Remain01 return the cd range from 0 to 1 0 means timer finished Declaration public float Remain01 { get; } Property Value Type Description System.Single Methods Pause() Pause this timer Declaration public void Pause() Reset() Reset countdown timer with default setting Declaration public void Reset() Reset(Single) reset countdown timer with new timeSection Declaration public void Reset(float timeSection) Parameters Type Name Description System.Single timeSection new time section for this timer Resume() Resume this timer Declaration public void Resume()"
  },
  "api/Scream.UniMO.Utils.AnimationEventHandler.html": {
    "href": "api/Scream.UniMO.Utils.AnimationEventHandler.html",
    "title": "Class AnimationEventHandler | UniMO",
    "keywords": "Class AnimationEventHandler this is a class can add to gameObject then when animation finished you can use animation event to call AnimationFinished it will broadcast the animation clip it set on animation event who subscribe the event OnAnimationFinshed Inheritance System.Object AnimationEventHandler Namespace : Scream.UniMO.Utils Assembly : cs.temp.dll.dll Syntax public class AnimationEventHandler : MonoBehaviour Properties Animation Animation component Declaration public Animation Animation { get; } Property Value Type Description Animation return animation component this gameobject hold Events OnAnimationFinClip this callback will return a animation clip Declaration public event Action<AnimationClip> OnAnimationFinClip Event Type Type Description Action < AnimationClip > OnAnimationFinString this callback will return a string Declaration public event Action<String> OnAnimationFinString Event Type Type Description Action < String > OnAnimationFinVoid this callback won't return anything Declaration public event Action OnAnimationFinVoid Event Type Type Description Action"
  },
  "api/Scream.UniMO.Utils.ColorUtils.html": {
    "href": "api/Scream.UniMO.Utils.ColorUtils.html",
    "title": "Class ColorUtils | UniMO",
    "keywords": "Class ColorUtils utils about color Inheritance System.Object ColorUtils Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO.Utils Assembly : cs.temp.dll.dll Syntax public class ColorUtils Methods HSV2RGB(Vector3) Convert hsv color to rgb Declaration public static Color HSV2RGB(Vector3 hsv) Parameters Type Name Description Vector3 hsv value to convert Returns Type Description Color rgb value as Color RGB2HSV(Color) convert rgb formet to hsv format Declaration public static Vector3 RGB2HSV(Color rgb) Parameters Type Name Description Color rgb value to convert Returns Type Description Vector3 hsv value SetAlpha(Color, Single) Set color's alpha range:0~255 Declaration public static Color SetAlpha(Color rgb, float alpha) Parameters Type Name Description Color rgb original color System.Single alpha new alpha Returns Type Description Color new color SetAlpha01(Color, Single) Set colors alpha range:0~1 Declaration public static Color SetAlpha01(Color rgb, float alpha) Parameters Type Name Description Color rgb original color System.Single alpha new alpha Returns Type Description Color new color SetAlphaHalf(Color) Set alpha of color to half Declaration public static Color SetAlphaHalf(Color rgb) Parameters Type Name Description Color rgb original color Returns Type Description Color new color"
  },
  "api/Scream.UniMO.Utils.html": {
    "href": "api/Scream.UniMO.Utils.html",
    "title": "Namespace Scream.UniMO.Utils | UniMO",
    "keywords": "Namespace Scream.UniMO.Utils Classes AnimationEventHandler this is a class can add to gameObject then when animation finished you can use animation event to call AnimationFinished it will broadcast the animation clip it set on animation event who subscribe the event OnAnimationFinshed ColorUtils utils about color JsonFileUtility Utils about json file"
  },
  "api/Scream.UniMO.Utils.JsonFileUtility.html": {
    "href": "api/Scream.UniMO.Utils.JsonFileUtility.html",
    "title": "Class JsonFileUtility | UniMO",
    "keywords": "Class JsonFileUtility Utils about json file Inheritance System.Object JsonFileUtility Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO.Utils Assembly : cs.temp.dll.dll Syntax public class JsonFileUtility Methods CreateJsonFile<T>(T, String, String) Create a json file to specific path by custom object Declaration public static void CreateJsonFile<T>(T obj, string path, string fileName) Parameters Type Name Description T obj object wants to convert to json file System.String path path for json file System.String fileName file name for json file Type Parameters Name Description T type of original object Load<T>(String) load json file from path and convert to specific type Declaration public static T Load<T>(string path) Parameters Type Name Description System.String path path of json file Returns Type Description T result Type Parameters Name Description T type want to convert to"
  },
  "api/Scream.UniMO.Utils2D.HitDirection.html": {
    "href": "api/Scream.UniMO.Utils2D.HitDirection.html",
    "title": "Enum HitDirection | UniMO",
    "keywords": "Enum HitDirection contains four direction and a none direction Namespace : Scream.UniMO.Utils2D Assembly : cs.temp.dll.dll Syntax public enum HitDirection Fields Name Description Down Left None Right Up"
  },
  "api/Scream.UniMO.Utils2D.HitResult.html": {
    "href": "api/Scream.UniMO.Utils2D.HitResult.html",
    "title": "Class HitResult | UniMO",
    "keywords": "Class HitResult hit result about raycast Inheritance System.Object HitResult Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO.Utils2D Assembly : cs.temp.dll.dll Syntax [Serializable] public class HitResult Constructors HitResult(RaycastHit2D, HitDirection, Vector2) constructor Declaration public HitResult(RaycastHit2D hit2D, HitDirection direction, Vector2 detailPos) Parameters Type Name Description RaycastHit2D hit2D hit result in raycasthit2d HitDirection direction Vector2 detailPos which ray hits the object Fields DetailPos which ray hits the object Declaration public Vector2 DetailPos Field Value Type Description Vector2 Direction which direction hits the object Declaration public HitDirection Direction Field Value Type Description HitDirection Hit2D the hit result in raycasthit2d Declaration public RaycastHit2D Hit2D Field Value Type Description RaycastHit2D"
  },
  "api/Scream.UniMO.Utils2D.html": {
    "href": "api/Scream.UniMO.Utils2D.html",
    "title": "Namespace Scream.UniMO.Utils2D | UniMO",
    "keywords": "Namespace Scream.UniMO.Utils2D Classes HitResult hit result about raycast ParallaxBG This is a parallax background set bg object postion.x due to its z position you can have lots of bg object at the same time ref: https://www.youtube.com/watch?v=5E5_Fquw7BM RayCastController Class to shoot raycast around a box collider return all raycast result Render2D utils for render in 2d Enums HitDirection contains four direction and a none direction"
  },
  "api/Scream.UniMO.Utils2D.ParallaxBG.html": {
    "href": "api/Scream.UniMO.Utils2D.ParallaxBG.html",
    "title": "Class ParallaxBG | UniMO",
    "keywords": "Class ParallaxBG This is a parallax background set bg object postion.x due to its z position you can have lots of bg object at the same time ref: https://www.youtube.com/watch?v=5E5_Fquw7BM Inheritance System.Object ParallaxBG Namespace : Scream.UniMO.Utils2D Assembly : cs.temp.dll.dll Syntax public class ParallaxBG : MonoBehaviour"
  },
  "api/Scream.UniMO.Utils2D.RayCastController.html": {
    "href": "api/Scream.UniMO.Utils2D.RayCastController.html",
    "title": "Class RayCastController | UniMO",
    "keywords": "Class RayCastController Class to shoot raycast around a box collider return all raycast result Inheritance System.Object RayCastController Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO.Utils2D Assembly : cs.temp.dll.dll Syntax [Serializable] public class RayCastController Constructors RayCastController(LayerMask, Vector2, Single, Single, BoxCollider2D) Constructor Declaration public RayCastController(LayerMask layers, Vector2 rayNums, float offset, float rayLength, BoxCollider2D collider2D) Parameters Type Name Description LayerMask layers layers should rays detect Vector2 rayNums how many rays will cast in one direction every time System.Single offset offset from center point System.Single rayLength length of rays BoxCollider2D collider2D which collider to be the reference Properties Down if there is anything hits in down direction of this object Declaration public bool Down { get; } Property Value Type Description System.Boolean IsCollide if object collides with any objects Declaration public bool IsCollide { get; } Property Value Type Description System.Boolean result Left if there is anything hits in left direction of this object Declaration public bool Left { get; } Property Value Type Description System.Boolean Result Contains all hit result from four direcion Declaration public List<HitResult> Result { get; } Property Value Type Description List < HitResult > Right if there is anything hits in right direction of this object Declaration public bool Right { get; } Property Value Type Description System.Boolean Up if there is anything hits in up direction of this object Declaration public bool Up { get; } Property Value Type Description System.Boolean Methods Init(BoxCollider2D) MUST Call this method to init raycastcontroller if you set value in inspector Declaration public void Init(BoxCollider2D collider2D) Parameters Type Name Description BoxCollider2D collider2D which collider to be the reference Tick() Call this method to update information about hit result Declaration public void Tick()"
  },
  "api/Scream.UniMO.Utils2D.Render2D.html": {
    "href": "api/Scream.UniMO.Utils2D.Render2D.html",
    "title": "Class Render2D | UniMO",
    "keywords": "Class Render2D utils for render in 2d Inheritance System.Object Render2D Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Scream.UniMO.Utils2D Assembly : cs.temp.dll.dll Syntax public static class Render2D Methods ChangeDirection(Boolean, Transform, Boolean) flip target due to IsFacingRight Declaration public static void ChangeDirection(bool IsFacingRight, Transform target, bool IsInvert = false) Parameters Type Name Description System.Boolean IsFacingRight is target facing at right direction Transform target which transform to change System.Boolean IsInvert ChangeDirectionXWithSpriteRender(Boolean, SpriteRenderer, Boolean) flip target Declaration public static void ChangeDirectionXWithSpriteRender(bool flipX, SpriteRenderer renderer, bool IsInvert = false) Parameters Type Name Description System.Boolean flipX flipX or not SpriteRenderer renderer ref for target renderer System.Boolean IsInvert invert the result or not ChangeDirectionY(Boolean, Transform, Boolean) flip target due to IsFacingRight Declaration public static void ChangeDirectionY(bool IsFacingRight, Transform target, bool IsInvert = false) Parameters Type Name Description System.Boolean IsFacingRight is target facing at right direction Transform target which transform to change System.Boolean IsInvert invert the result or not ChangeDirectionYWithSpriteRender(Boolean, SpriteRenderer, Boolean) flip target Declaration public static void ChangeDirectionYWithSpriteRender(bool flipY, SpriteRenderer renderer, bool IsInvert = false) Parameters Type Name Description System.Boolean flipY flipY or not SpriteRenderer renderer ref for target renderer System.Boolean IsInvert invert the result or not"
  },
  "index.html": {
    "href": "index.html",
    "title": "UniMO | UniMO",
    "keywords": "UniMO Utils collection for Unity API References UniMO's API References are hosted at scream870102.github.io/UniMO by DocFX License This library is under the MIT License ."
  },
  "manual/unimo_manual.html": {
    "href": "manual/unimo_manual.html",
    "title": "UniMO Manual | UniMO",
    "keywords": "UniMO Manual UNDER CONSTRUCTION"
  }
}